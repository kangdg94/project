package bbs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;


public class BbsDAO {
	

	private Connection conn;
	private ResultSet rs;
	
	public BbsDAO() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/BBS?characterEncoding=UTF-8&serverTimezone=UTC";
			String dbID = "root";
			String dbPassword ="1234";
			Class.forName("com.mysql.cj.jdbc.Driver");
		conn = DriverManager.getConnection(dbURL,dbID,dbPassword);
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public String getDate() {
		String SQL = "SELECT NOW()";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getString(1);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return "";
		
	}
	
	public int write(String bbsTitle, String userID, String bbsContent, String fileName, String fileRealName) {
		String SQL = "INSERT INTO BBS VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,getNext());
			pstmt.setString(2,bbsTitle);
			pstmt.setString(3,userID);
			pstmt.setString(4,getDate());
			pstmt.setString(5,bbsContent);
			pstmt.setInt(6, 1);
			pstmt.setString(7, fileName);
			pstmt.setString(8, fileRealName);
			pstmt.setInt(9, 1);
			return pstmt.executeUpdate();
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //db eeror
	}
	
	public boolean nextPage(int pageNumber) {
		String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID < ? AND bbsAvailable = 1";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 5);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return true;
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public int getNext() {
		String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID DESC";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return rs.getInt(1) + 1;
			}
			return 1; 
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //db eeror
	}
	//그냥 출력할때 리스트 
	public ArrayList<Bbs> getList(int pageNumber){
		String SQL = "SELECT bbsID, bbsTitle, userID, bbsDate, bbsContent, bbsAvailable, fileName, fileRealName, bbsHit FROM BBS WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 5";
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 5);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Bbs bbs = new Bbs(
						rs.getInt(1),
						rs.getString(2),
						rs.getString(3),
						rs.getString(4),
						rs.getString(5),
						rs.getInt(6),
						rs.getString(7),
						rs.getString(8),
						rs.getInt(9));
				
				list.add(bbs);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	
	//검색할때 리스트 
	public ArrayList<Bbs> getList(int pageNumber, String searchType, String search)
	{	
		String SQL = "";
		
		ArrayList<Bbs> list = null;
		
		try 
		{
			 list = new ArrayList<Bbs>();
			
			if(searchType.equals("내용만"))
			{
				SQL = "SELECT "
						+ "bbsID, bbsTitle, userID, bbsDate, bbsContent, bbsAvailable, fileName, fileRealName, bbsHit "
						+ "FROM "
						+ "BBS "
						+ "WHERE "
						+ "bbsID < ? AND "
						+ "bbsAvailable = 1 AND "
						+ "bbsContent LIKE ? "
						+ "ORDER BY bbsID DESC LIMIT 5";
			}
			else if(searchType.equals("전체")) 
			{
				SQL = "SELECT "
						+ "bbsID, bbsTitle, userID, bbsDate, bbsContent, bbsAvailable, fileName, fileRealName, bbsHit"
						+ "FROM "
						+ "BBS "
						+ "WHERE "
						+ "bbsID < ? AND "
						+ "bbsAvailable = 1 AND "
						+ "CONCAT(IFNULL(bbsTitle, ''), IFNULL(userID, ''), IFNULL(bbsContent, ''), IFNULL(fileName, ''), IFNULL(fileRealName, '')) LIKE ? "
						+ "ORDER BY bbsID DESC LIMIT 5";
			}
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 5);
			pstmt.setString(2, "%" + search + "%");
			rs = pstmt.executeQuery(); 
			
			while (rs.next()) 
			{
				Bbs bbs = new Bbs(
						rs.getInt(1),
						rs.getString(2),
						rs.getString(3),
						rs.getString(4),
						rs.getString(5),
						rs.getInt(6),
						rs.getString(7),
						rs.getString(8),
						rs.getInt(9));
				
				list.add(bbs);
			}
			
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return list;
	}
	
	
	
	public Bbs getBbs(int bbsID) {
		String SQL = "SELECT * FROM BBS WHERE bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID);  
			rs = pstmt.executeQuery();
			if (rs.next()) {
				Bbs bbs = new Bbs(
						rs.getInt(1),
						rs.getString(2),
						rs.getString(3),
						rs.getString(4),
						rs.getString(5),
						rs.getInt(6),
						rs.getString(7),
						rs.getString(8),
						rs.getInt(9));
				return bbs;
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	public int update(int bbsID, String bbsTitle, String bbsContent) {
		String SQL = "UPDATE BBS SET bbsTitle = ?, bbsContent = ? WHERE bbsID = ?";
		try {
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, bbsTitle);
			pstmt.setString(2, bbsContent);
			pstmt.setInt(3, bbsID);
			return pstmt.executeUpdate();
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //db eeror
		
	}
	
	public int delete(int bbsID) {
		String SQL = "UPDATE BBS SET bbsAvailable = 0 WHERE bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  bbsID);
			return pstmt.executeUpdate();
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}
	
	public int hit(int bbsID) {
		String SQL = "UPDATE BBS SET bbsHit = bbsHit +1 WHERE bbsID = ?";
		try {
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, bbsID);
			return pstmt.executeUpdate();
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //db eeror
		
	}
	
	
	public ArrayList<Bbs> myhistory(int pageNumber, String userID)
	{	
		String SQL = "";
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			SQL = "SELECT "
				+ "bbsID, bbsTitle, userID, bbsDate, bbsContent, bbsAvailable, fileName, fileRealName, bbsHit "
				+ "FROM "
				+ "BBS "
				+ "WHERE "
				+ "bbsID < ? AND "
				+ "bbsAvailable = 1 AND "
				+ "userID = ? "
				+ "ORDER BY bbsID DESC LIMIT 5";
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1,  getNext() - (pageNumber - 1) * 5);
			pstmt.setString(2, userID);
			rs = pstmt.executeQuery(); 
			while (rs.next()) 
			{
				Bbs bbs = new Bbs(
						rs.getInt(1),
						rs.getString(2),
						rs.getString(3),
						rs.getString(4),
						rs.getString(5),
						rs.getInt(6),
						rs.getString(7),
						rs.getString(8),
						rs.getInt(9));
				
				list.add(bbs);
			}
			}
		catch (Exception e) {
			e.printStackTrace();
		}
		return list;
		}
	
	public ArrayList<Bbs> search()
	{	
		String SQL = "";
		ArrayList<Bbs> list = new ArrayList<Bbs>();
		try {
			SQL =  "SELECT "
					+ "bbsID, bbsTitle, userID, bbsDate, bbsContent, bbsAvailable, fileName, fileRealName, bbsHit "
					+ "FROM BBS"
					+ "WHERE "
					+ "DATE(bbsDate) >= DATE_SUB(NOW(), INTERVAL 3 DAY)";
			System.out.println(SQL);
			
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			rs = pstmt.executeQuery(); 
			while (rs.next()) 
			{
				Bbs bbs = new Bbs(
						rs.getInt(1),
						rs.getString(2),
						rs.getString(3),
						rs.getString(4),
						rs.getString(5),
						rs.getInt(6),
						rs.getString(7),
						rs.getString(8),
						rs.getInt(9));
				
				list.add(bbs);
			}
			}
		catch (Exception e) {
			e.printStackTrace();
		}
		return list;
		}
}